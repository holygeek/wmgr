#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::RealBin";
use Common;

my $cw = 84; # comfort width

my $direction = $ARGV[0];
chomp(my $winid = qx/currwin/);
my ($term, $geom) = qx/xwininfo -id $winid/
		      =~ /$winid "([^"]+)".*(-geometry \S+).*/gms;
# print "term $term geom $geom\n";
my $action;
if ($direction eq 'left') {
  $action = 'shrink';
} elsif ($direction eq 'right') {
  $action = 'grow';
} elsif ($direction eq 'big') {
  $action = 'big';
}
my ($width, $height) = $geom =~ m/-geometry ([^x]+)x([^+-]+)/;
# print "dir $direction term $term\n";
# print "geom $geom width $width height $height";

my $new_width;
my ($k) = $term =~ /term\.(.)/;
if ($action eq 'shrink') {
  $new_width = Common::read_file("/dev/shm/term/$k/col");
} elsif ($action eq 'grow') {
  $new_width = 2 * $cw;
} elsif ($action eq 'big') {
  my ($root_width, $root_height) = qx/xwininfo -root/ =~ m/
      .*.geometry.(\d+)x(\d+).*
    /gxms;
    print "root_width $root_width\n";
  $new_width = $root_width;
} else {
  print "Nothing to do\n";
}

if ($new_width && $new_width != $width) {
  print "$action: $width -> $new_width\n";
  my $col;
  my $row = Common::read_file("/dev/shm/term/$k/row");
  if ($action eq 'shrink') {
    $col = Common::read_file("/dev/shm/term/$k/col");
  } else {
    $col = $new_width;
  }
  my $cmd = "xdotool getactivewindow windowsize --sync --usehints -- $col $row";
  print "$cmd\n";
  qx/$cmd/;
  if ($action eq 'shrink') {
    my $x = Common::read_file("/dev/shm/term/$k/x");
    my $y = Common::read_file("/dev/shm/term/$k/y");
    $x -= 1; # xdotool is off by one
    $y -= 1;
    qx/xdotool getactivewindow windowmove -- $x $y/;
  }
}

# xdotool getactivewindow windowsize --usehints 80 24
#  wmctrl -r 33554466 -i -e 0,-1,-1,95,80
# zenity --info --text $1

