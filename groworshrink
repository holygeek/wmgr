#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::RealBin";
use Common;
use WMGR home => "$FindBin::RealBin";

my ($root_geom) = `xwininfo -root` =~ m/-geometry (.*[0-9])/;
my ($root_width, $root_height) = split_geometry($root_geom);
# print "root_width [$root_width] root_height [$root_height]\n"; exit 1;

sub split_geometry {
  my ($geom) = @_;

  my ($width, $height, $x_neg, $offset_x, $y_neg, $offset_y) = $geom
    =~ m/
      ([0-9]+)x([0-9]+)  # WidthxHeight
      ([+-])
      ([+-]?[0-9]+) # XOFF
      ([+-])
      ([+-]?[0-9]+) # YOFF
      /x;
  my $x_rel = 'left';
  my $y_rel = 'top';
  if ($x_neg eq '-') {
    $x_rel = 'right';
  }
  if ($y_neg eq '-') {
    $y_rel = 'bottom';
  }
  return ($width, $height, int($offset_x), int($offset_y), $x_rel, $y_rel);
}

sub is_inside {
  my ($width, $height, $offset_x, $offset_y, $x, $y) = @_;

  my $X = $offset_x + $width;
  my $Y = $offset_y + $offset_y;
  return $x >= $offset_x && $y >= $offset_y && $x <= $X && $y <= $Y;
}

sub get_full_screen_width_at {
  my ($x, $y) = @_;

  my @xrandr = `xrandr | awk '/ connected / {print \$3}'`;
  if (scalar @xrandr == 1) {
      return $root_width;
  }

  print join ("\n", @xrandr)."\n";
  foreach my $geom (@xrandr) {
    my @geom = split_geometry($geom);
    if (is_inside(@geom, $x, $y)) {
      print join(' a, @geom') . "\n";
      return $geom[0];
    } else {
      print "$x, $y is not inside $geom\n";
    }
  }
  print "We should not reach here?\n";
  exit 1;
}

my $cw = 84; # comfort width

my $direction = $ARGV[0];
die "No direction given" unless defined $direction;
chomp(my $winid = qx/currwin/);
my ($term, $corners, $geom) = qx/xwininfo -id $winid/
		      =~ /$winid "([^"]+)".*Corners:\s*(.*)\n\s*-geometry (\S+).*/gms;
# print "term [$term] corners [$corners] geom [$geom]\n"; exit 1;

my ($width, $height) = split_geometry($geom);
my $action;
if ($direction eq 'left') {
  $action = 'shrink';
} elsif ($direction eq 'right') {
  $action = 'big';
} elsif ($direction eq 'big') {
  $action = 'big';
}
die "No action for direction $direction" unless $action;

my ($x, $y) = get_top_left_coordinate($corners);

my $new_width;
my ($k) = $term =~ /term\.(.)/;
if ($action eq 'shrink') {
  $new_width = Common::read_file("/dev/shm/term/$k/col");
} elsif ($action eq 'grow') {
  $new_width = 2 * $cw;
} elsif ($action eq 'big') {
  my $full_screen_width = get_full_screen_width_at($x, $y);
  my $W = WMGR::get_config('cellw');
  $new_width = int($full_screen_width / $W);
} else {
  print "Nothing to do\n";
}

if ($new_width && $new_width != $width) {
  print "$action: $width -> $new_width\n";
  my $col;
  my $row = Common::read_file("/dev/shm/term/$k/row");
  if ($action eq 'shrink') {
    $col = Common::read_file("/dev/shm/term/$k/col");
  } else {
    $col = $new_width;
  }
  my $cmd = "xdotool getactivewindow windowsize --sync --usehints -- $col $row";
  print "$cmd\n";
  qx/$cmd/;
  if ($action eq 'shrink') {
    my $x = Common::read_file("/dev/shm/term/$k/x");
    my $y = Common::read_file("/dev/shm/term/$k/y");
    $x -= 1; # xdotool is off by one
    $y -= 1;
    qx/xdotool getactivewindow windowmove -- $x $y/;
  }
}

# xdotool getactivewindow windowsize --usehints 80 24
#  wmctrl -r 33554466 -i -e 0,-1,-1,95,80
# zenity --info --text $1

sub get_top_left_coordinate {
  my ($corners) = @_;

  my ($x, $y) = $corners =~ m/([+-][0-9]+)([+-][0-9]+)/;
  return (int($x), int($y));
}
