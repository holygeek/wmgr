#!/usr/bin/env perl
# vim:set sts=4 ts=4 sw=4 expandtab:
# xterms - start a bunch of xterms
# Created: Fri Jul 25 09:09:18 MYT 2008

use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use FindBin;
use lib "$FindBin::RealBin";
use WMGR home => "$FindBin::RealBin";
my $wmgr_home = $FindBin::RealBin;
use Screen;
use Tmux;
use Common;
use Time::HiRes qw/usleep/;

my $TMP_DIR = '/dev/shm';
my $geom = qx/xrandr | grep '\*'/;

my $muxer = get_muxer();
checkMuxerCapabilities($muxer);
$muxer->clean();

my $two_display_width = 3360;
my $offset_x = 0;
if ($geom =~ /$two_display_width/) {
    $offset_x = $two_display_width / 2;
}

my $full_rows=69;
my $offset_y = '+-2'; # '+-15';
# Need to add 1680 for two monitors
my $geometries = get_geometries(fallback => {
    #logs      => '209x60-' . (0) . '+0',
    any    => "116x$full_rows-" . ($offset_x + 0) . $offset_y,    # anything goes
    #rtfm      => '100x83+' . ($offset_x + 247) . '+0',    # read man pages here
    #gits      => '140x83+' . ($offset_x + 403) . '+0',
    # hilite => "153x32-3" . $offset_y,
    full   => "239x55+" . ($offset_x + 0) . $offset_y,
    shells => "86x$full_rows+-1" . $offset_y,
    vims   => "86x$full_rows+689" . $offset_y,
    }
);

my $xterms = {};

my ($bg, $fg) = qw/black white/;

my %opts;
getopts('b:ehlrvp', \%opts) or do { usage(); exit 1; };
if (defined $opts{e}) {
    system("vim ~/wmgr/xterms.conf.pl");
    exit(0);
}
my $verbose = $opts{v};
if (defined $opts{h}) {
    usage();
    exit(0);
}
if (defined $opts{l}) {
    my @list = $muxer->list();
    foreach my $key (sort keys %$geometries) {
        print "$key\t=> $geometries->{$key}\n";
    }
    #all_xterm_mapped();
    exit 0;
}

if (defined $opts{r}) {
    my @list = $muxer->list();
    my $fmt = "%-8s %-8s %-22s %s\n";
    printf $fmt, qw(PID NAME DATE STATE);
    foreach my $s (@list) {
        my %s = %$s;
        printf $fmt, @s{qw(pid name date status)};
    }
}
if (defined $opts{b}) {
    $bg = $opts{b};
    $fg = ($bg eq 'white') ? 'black' : 'white';
}

foreach my $session (keys %$geometries) {
    my ($first_letter) = $session =~ /(.).*/;
    my ($title) = "term.$first_letter";

    $xterms->{$session} = "TERM_NAME=$session SHORT_TERM_NAME=$first_letter "
                        . "XTERMS_BG=$bg XTERMS_FG=$fg TMUX= "
                        # .  "xfce4-terminal "
                        # .  "gnome-terminal "
                        # .  "rxvt-unicode "
                        # . "xterm "
                        # . "/usr/local/bin/uxterm "
                        . "/usr/bin/uxterm "
                        # . "/usr/local/bin/xterm -u8 "

                        # gnome-terminal:
                        # .  "--title term.$session "
                        # xterm:
                        .  "-title $title "
                        .  "-fg $fg -bg $bg "
                        .  "-b 0 "
                        # Do not scroll window on new output
                        . "-si "

                        # xfce4-terminal:
                        # .  "--geometry=". $geometries->{$session} . " "
                        # rxvt-unicode:
                        # .  "--geometry ". $geometries->{$session} . " "
                        # xterm:
                        .  "-geometry ". $geometries->{$session} . " "

                        .  "-e";
}

if (defined $opts{p}) {
    restore_positions();
    exit 0;
}

my $muxer_status = $muxer->status();
my @torun;
my @toreattach;

if (defined($ARGV[0])) {
  if ($ARGV[0] eq 'restart') {
    restart_and_exit();
  } elsif ($ARGV[0] eq 'stop') {
    restart_and_exit('exit');
  } elsif ($ARGV[0] eq 'repos') {
    print "Todo: resposition xterms windows\n";
  }

  # Start only the given session names
  foreach my $which (split(/,/, $ARGV[0])) {
    foreach my $session_name (keys %$xterms) {
        if ($session_name =~ /^$which/) {
            toRunOrReattach($muxer_status, $session_name);
        }
    }
  }

  if (scalar @torun == 0 && scalar @toreattach == 0 ) {
    print "No session matches $ARGV[0]\n";
    exit 1;
  }
} else {
  foreach my $session_name (keys %{$xterms}) {
      toRunOrReattach($muxer_status, $session_name);
  }
}

sub toRunOrReattach {
    my ($muxer_status, $session) = @_;
    if ($muxer->isRunning($muxer_status, $session)) {
        if ($muxer->isDetached($muxer_status, $session)) {
            push @toreattach, $session;
        }
    } else {
        push @torun, $session;
    }
}

my @started;
foreach my $session (@torun) {
    remove_winid_file($session);
    my $executable = $muxer->runner($session);
    my $cmd = $xterms->{$session} . " $executable &";
    my $cmd_to_print = $cmd;
    #$cmd_to_print =~ s/ -/ \\\n\t-/g;
    print "$cmd_to_print\n" if $verbose;
    system("cd $ENV{HOME}; $cmd");
    push @started, $session;
}
foreach my $session (@toreattach) {
    remove_winid_file($session);
    my $executable = $muxer->attacher($session);
    my $cmd = $xterms->{$session} . " $executable &";
    my $cmd_to_print = $cmd;
    #$cmd_to_print =~ s/ -/ \\\n\t-/g;
    print "$cmd_to_print\n" if $verbose;
    system("cd $ENV{HOME}; $cmd");
    push @started, $session;
}

my $c = 0;
while (! all_xterm_mapped(@started)) {
    usleep 250_000;
    $c += 1;
    if ($c > 15) {
        die "Timed out waiting for all xterm windows being mapped."
    }
}
update_winid(@torun, @toreattach);
#`(sleep 4 && cwd=$cwd $cwd/xterms.seticons.sh )&`;
`cwd=$wmgr_home $wmgr_home/xterms.seticons.sh &`;

system("if ps -ef|grep xbindkeys|grep -q -v grep; then :; else $wmgr_home/xbind; fi");

sub get_geometries {
    my ($dummy, $fallback) = @_;

    return WMGR::get_config('geometries') || $fallback;
}

sub usage {
  print <<USAGE;
NAME
    xterms - Start a bunch of terminals

SYNOPSIS
    xterms [-hlerv]
    xterms [-b <background color>] [session1,session2,...]
    xterms restart <options and arguments>
    xterms -p

DESCRIPTION
    xterms starts the terminals with the geometries set in the config file
    xterms.conf.pl

    "xterms restart [args]" restarts itself after killing all xterm terminals.

    The argument [session1,session2,...] limits the terminals to be started.
    Default is to start all terminals.

OPTIONS
    -h
       Shows this help message

    -b <background color>
       Sets the background color. This implictly sets the foreground color too.
       If the backgroudn color is white, the foreground color is set to black.
       For all other backgroud color, the foreground color is set to white.

       The background and foreground colors are exported as environment
       variable XTERMS_BG and XTERMS_FG in the terminals.

    -e
       Edits the configuration file xterms.pl.conf

    -l
       List sessions found in xterms.conf.pl

    -p
       Restore xterms windows' positions
    -r
       List sessions and their status
    -v
       Verbose
USAGE
}

sub update_winid {
    my (@to_run) = @_;

    my (@cmds) = map { $xterms->{$_} } @to_run;
    my (@new_titles) = map { $_ =~ s/.*-title //; $_ =~ s/ .*//; $_ } @cmds;

    my @term_list = `wmctrl -l|grep ' term.[a-z]\$'`;
    my %winids;
    foreach my $line (@term_list) {
        chomp $line;
        my (@e) = split(/  */, $line);
        #0x03200024  0 a term.f
        my $id = $e[0];
        my $title = $e[3];
        $winids{$title} = $id;
    }

    my $xwininfo = {};
    foreach my $title (@new_titles) {
        Common::write_file("$TMP_DIR/$title.winid", oct($winids{$title}));
        save_window_geometry($winids{$title});
    }
}

sub save_window_geometry {
    my ($id) = @_;
    my $wininfo = qx/xwininfo -id $id/;
    my ($term, $x, $y, $w, $h, $col, $row)
        = $wininfo =~ /
            .*Window.id:.*0x[^ ]+\s+"([^"]+)"
            .*Absolute.upper-left.X:\s+(-?\d+)
            .*Absolute.upper-left.Y:\s+(-?\d+)
            .*Width:\s+(\d+)
            .*Height:\s+(\d+)
            .*-geometry.(\d+)x(\d+)
        /gxms;

    my %item = (
        'term name' => $term,
        x => $x,
        y => $y,
        width => $w,
        height => $h,
        row  => $row,
        col  => $col,
    );
    while (my ($k, $v) = each %item) {
        die "Could not get $k from xwininfo for winid $id" if ! defined $v;
    }

    my ($k) = $term =~ /\.(.)/;
    my $dir = "$TMP_DIR/term/$k";
    qx/mkdir -p $dir/;
    Common::write_file($dir . "/w", $w);
    Common::write_file($dir . "/h", $h);
    Common::write_file($dir . "/x", $x);
    Common::write_file($dir . "/y", $y);
    Common::write_file($dir . "/row", $row);
    Common::write_file($dir . "/col", $col);
    Common::write_file($dir . "/bg", $bg);
}

sub restart_and_exit {
    my ($quit) = @_;
    $quit ||= '';

    shift @ARGV;
    my $args = join(' ', @ARGV);
    system(<<"    SHELL"
        nohup sh -c '
            echo " xterms $args"
            killall xterm
            while pidof xterm; do
                sleep .2
            done
            rm -f $TMP_DIR/term.?.winid
            sleep 1 # Avoid deadlock
            $quit
            xterms $args
        ' > $wmgr_home/nohup.xterm.restart.log 2>&1 &
    SHELL
    );
    exit(0);
}

sub get_muxer {
    my $muxer;
    my $muxer_pkg = WMGR::get_config('muxer');
    if ($muxer_pkg eq 'Tmux') {
        $muxer = Tmux->new();
    } elsif ($muxer_pkg eq 'Screen') {
        $muxer = Screen->new();
    } else {
        die "no muxer for $muxer_pkg";
    }
    return $muxer;
}

sub checkMuxerCapabilities {
    my ($muxer) = @_;
    my @abilities = qw(
        attacher
        clean
        cmd_dump
        cmd_start
        cmd_goto
        cmd_list
        isDetached
        isRunning
        list
        runner
        status
    );
    # cmd_dump needed by ./dump
    # cmd_start needed by ./bigterm
    my @errors;
    foreach my $sub (@abilities) {
        unless ($muxer->can($sub)) {
            push @errors, $sub;
        }
    }

    if (@errors) {
        die join("\n\t", "Missing subs in $muxer:", @errors);
    }
}

sub get_mapped_term_names {
    my @mapped = `wmctrl -l` =~ /(term\..)/g;
    return @mapped;
}

sub get_term_name_from_session_name {
    my ($session) = @_;
    my ($c) = $session =~ /(.)/;
    return "term.$c";
}

sub all_xterm_mapped {
    my (@started) = @_;
    my %is_mapped;
    my $c = 1;
    foreach my $term_name (get_mapped_term_names()) {
        printf STDERR "$c $term_name is mapped\n";
        $c++;
        $is_mapped{$term_name} = 1;
    }
    foreach my $session (@started) {
        my $term_name = get_term_name_from_session_name($session);
        if (! $is_mapped{$term_name}) {
            print STDERR "$c $term_name is not mapped\n";
            $c++;
            return 0;
        }
    }
    return 1;
}

sub remove_winid_file {
    my ($session) = @_;
    my $winid_file = get_winid_file($session);
    unlink $winid_file if -e $winid_file;
}

sub get_winid_file {
    my ($session) = @_;
    my $term_name = get_term_name_from_session_name($session);
    return "$TMP_DIR/$term_name.winid";
}

sub get_root_geometry {
    my $wininfo = qx/xwininfo -root/;
    my ( $x, $y, $w, $h, $col, $row)
        = $wininfo =~ /
            .*Absolute.upper-left.X:\s+(-?\d+)
            .*Absolute.upper-left.Y:\s+(-?\d+)
            .*Width:\s+(\d+)
            .*Height:\s+(\d+)
            .*-geometry.(\d+)x(\d+)
        /gxms;

        return {
            x => $x,
            y => $y,
            width => $w,
            height => $h,
            col => $col,
            row => $row,
        };
}

sub restore_positions {
    my $root = get_root_geometry;
    my $conf = WMGR::get_config();

    my @session_names;

    while (my ($k, $v) = each %{$conf->{geometries}}) {
        my $title = get_term_name_from_session_name($k);
        my ($w, $h, $x, $y) = split /[x+-]+/, $v;
        my $width = $w * $conf->{cellw};
        my $height = $h * $conf->{cellh};
        push @session_names, $k;

        my $pos = $v;
        $pos =~ s/[0-9]+/./g;
        $pos =~ s/^\.//;
        $pos =~ s/\.$//;
        my $mvarg;
        if ($pos eq "x.+.+") {
            $mvarg = "0,$x,$y,$width,$height";
        } elsif ($pos eq "x.+.-") {
            my $newy = $root->{height} + $y - $height;
            $mvarg = "0,$x,$newy,$width,$height";
            #print "FOO $k $v\n";
            #print "geom $x $y $w $h\n";
            #print "   TODO handle $pos newy $newy y $y \n";
            #print "wmctrl -r $title -e 0,$x,$newy,$width,$height\n";
        } elsif ($pos eq "x.+.++") {
            # A TODO handle x.+.++ - mermaid 97x51+341++1
            my $newy = $y;
            $mvarg = "0,$x,$newy,$width,$height";
            #die "   A TODO handle $pos - $k $v\n";
        } elsif ($pos eq "x.-.+") {
            die "   B TODO handle $pos\n";
        } elsif ($pos eq "x.-.-") {
            die "   C TODO handle $pos\n";
        } elsif ($pos eq "x.+.+") {
            die "   D TODO handle $pos\n";
        } elsif ($pos eq "x.+-.-") {
            # E TODO handle x.+-.- - shells 97x51+-1-0

            # FIXME setting newx to -x is wrong - wmctrl says "value of -1 in
            # any position is interpreted to mean that the current geometry
            # value should not be modified."
            my $newx = -$x;

            my $newy = $root->{height} + $y - $height;
            $mvarg = "0,$newx,$newy,$width,$height";
            #die "   E TODO handle $pos - $k $v\n";
        } elsif ($pos eq "x.+-.++") {
            # F TODO handle x.+-.++ - gran 97x31+-1++1
            my $newx = -$x;
            $mvarg = "0,$newx,$y,$width,$height";
            #die "   F TODO handle $pos - $k $v\n";
        } else {
            die "   AAACK TODO handle $pos\n";
        }

        my $cmd = "wmctrl -r $title -e $mvarg";
        print "$cmd\n";
        qx/$cmd/;
    }
    update_winid(@session_names);
}
