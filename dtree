#!/usr/bin/env perl
# Created: Wed Nov 28 12:42:28 MYT 2012
use strict;
use warnings;
use Getopt::Std;

sub get_pwd {
	my ($pid) = @_;
	my $shell_cwd = "/dev/shm/$pid.cwd";
	if ( -f $shell_cwd ) {
		open my $f, '<', $shell_cwd or die "Could not open $shell_cwd: $!";
		my $cwd = <$f>;
		chomp $cwd;
		close $f;
		return $cwd;
	}
	my $environ = "/proc/$pid/environ";
	my ($pwd) = `test -r $environ && cat $environ|tr '\\000' '\\n'|grep '^PWD='` =~ m{PWD=(.*)};
	if (! defined $pwd) {
		return undef;
	}
	$pwd =~ s($ENV{HOME})(\~);
	return $pwd;
}

sub usage {
print <<"EOF";
NAME
	dtree - Show the initial \$PWD for each processes (as read from
	        /proc/\$pid/envorin

SYNOPSIS
	dtree <pid>
	dtree <screen session name>

DESCRIPTION
	Run pstree on given pid or screen session name, annotate each process
	id with their current directory

OPTIONS
	-h
	  Show this help message

	-s
	  Include parent processes too
EOF
}

my %opts;
# s - include parent processes too
# p - Show process id too
getopts("hdps", \%opts);
if (defined $opts{h}) {
	usage();
	exit 0;
}
my $show_parents = defined $opts{s} ? '-s' : '';
my $show_pid = defined $opts{p};

my $all = ! defined $ARGV[0];

my (@session_names, @PID_OR_SESSION);
my %session_name_for;
if ($all) {
	my $lines = `screen -ls|grep '^\t'`;
	(@PID_OR_SESSION) = $lines =~ m{\s+([0-9]+)\.[^\t]+\s}gms;
	(@session_names) = $lines =~ m{\s+([0-9]+\.[a-z]+)\s[^\t]+\s}gms;
	%session_name_for = map { split /\./ } @session_names;
} else {
	@PID_OR_SESSION = @ARGV;
}

my @output;
my %dirs;
foreach my $pid_or_session (@PID_OR_SESSION) {
	# If screen session name is given, get pid from screen -ls that matches
	# the session name
	my $output = '';
	my $pid = $pid_or_session;
	if ($pid_or_session !~ /^\d+$/) {
		my $screen_ls = `screen -ls`;
		($pid, my $session) = $screen_ls =~ m/(\d+)\.(${pid_or_session}[^\s]*)/;
		if (! $pid) {
			print "No screen session matching '$pid_or_session'\n";
			exit 1;
		}
		$output .= "$pid.$session\n";
	}

	my $tree = `pstree $show_parents -Up $pid`;
	foreach my $pid (keys %session_name_for) {
		$tree =~ s/\($pid\)/($pid.$session_name_for{$pid})/;
	}

	my @pids = $tree =~ m{\((\d+)\)}gms;

	foreach my $pid (@pids) {
		my $dir = get_pwd($pid);
		next if ! $dir;
		my $replacement = "($dir)";
		if ($show_pid) {
			$replacement = "($pid\@$dir)";
		}
		$tree =~ s{\($pid\)}{$replacement}gms;
	}

	$output .= $tree;
	push @output, $output;
}
print join("\n", @output);
